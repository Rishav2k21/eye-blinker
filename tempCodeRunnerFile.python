# import cv2
# import cvzone
# from cvzone.FaceMeshModule import FaceMeshDetector
# from cvzone.PlotModule import LivePlot


import cv2
import time
import numpy as np
import HandTrackingModule as htm
import math
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume

################################
wCam, hCam = 640, 480
################################

cap = cv2.VideoCapture(1)
cap.set(3, wCam)
cap.set(4, hCam)
pTime = 0

detector = htm.handDetector(detectionCon=0.7)

devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(
    IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
volume = cast(interface, POINTER(IAudioEndpointVolume))
# volume.GetMute()
# volume.GetMasterVolumeLevel()
volRange = volume.GetVolumeRange()
minVol = volRange[0]
maxVol = volRange[1]
vol = 0
volBar = 400
volPer = 0
while True:
    success, img = cap.read()
    img = detector.findHands(img)
    lmList = detector.findPosition(img, draw=False)
    if len(lmList) != 0:
        # print(lmList[4], lmList[8])

        x1, y1 = lmList[4][1], lmList[4][2]
        x2, y2 = lmList[8][1], lmList[8][2]
        cx, cy = (x1 + x2) // 2, (y1 + y2) // 2

        cv2.circle(img, (x1, y1), 15, (255, 0, 255), cv2.FILLED)
        cv2.circle(img, (x2, y2), 15, (255, 0, 255), cv2.FILLED)
        cv2.line(img, (x1, y1), (x2, y2), (255, 0, 255), 3)
        cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)

        length = math.hypot(x2 - x1, y2 - y1)
        # print(length)

        # Hand range 50 - 300
        # Volume Range -65 - 0

        vol = np.interp(length, [50, 300], [minVol, maxVol])
        volBar = np.interp(length, [50, 300], [400, 150])
        volPer = np.interp(length, [50, 300], [0, 100])
        print(int(length), vol)
        volume.SetMasterVolumeLevel(vol, None)

        if length < 50:
            cv2.circle(img, (cx, cy), 15, (0, 255, 0), cv2.FILLED)

    cv2.rectangle(img, (50, 150), (85, 400), (255, 0, 0), 3)
    cv2.rectangle(img, (50, int(volBar)), (85, 400), (255, 0, 0), cv2.FILLED)
    cv2.putText(img, f'{int(volPer)} %', (40, 450), cv2.FONT_HERSHEY_COMPLEX,
                1, (255, 0, 0), 3)


    cTime = time.time()
    fps = 1 / (cTime - pTime)
    pTime = cTime
    cv2.putText(img, f'FPS: {int(fps)}', (40, 50), cv2.FONT_HERSHEY_COMPLEX,
                1, (255, 0, 0), 3)

    cv2.imshow("Img", img)
    cv2.waitKey(1)

# cap = cv2.VideoCapture('video2.mp4')
# detector = FaceMeshDetector(maxFaces=1)

  

# plotY = LivePlot(640, 360, [20, 50], invert=True)

# idList = [22, 23, 24, 26, 110, 157, 158, 159, 160, 161, 130, 243]
# ratioList = []
# blinkCounter = 0
# counter = 0
# color = (255, 0, 255)

# while True:

#     if cap.get(cv2.CAP_PROP_POS_FRAMES) == cap.get(cv2.CAP_PROP_FRAME_COUNT):
#         cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

#     success, img = cap.read()
#     img, faces = detector.findFaceMesh(img, draw=False)

#     if faces:
#         face = faces[0]
#         for id in idList:
#             cv2.circle(img, face[id], 5,color, cv2.FILLED)

#         leftUp = face[159]
#         leftDown = face[23]
#         leftLeft = face[130]
#         leftRight = face[243]
#         lenghtVer, _ = detector.findDistance(leftUp, leftDown)
#         lenghtHor, _ = detector.findDistance(leftLeft, leftRight)

#         cv2.line(img, leftUp, leftDown, (0, 200, 0), 3)
#         cv2.line(img, leftLeft, leftRight, (0, 200, 0), 3)

#         ratio = int((lenghtVer / lenghtHor) * 100)
#         ratioList.append(ratio)
#         if len(ratioList) > 3:
#             ratioList.pop(0)
#         ratioAvg = sum(ratioList) / len(ratioList)

#         if ratioAvg < 35 and counter == 0:
#             blinkCounter += 1
#             color = (0,200,0)
#             counter = 1
#         if counter != 0:
#             counter += 1
#             if counter > 10:
#                 counter = 0
#                 color = (255,0, 255)

#         cvzone.putTextRect(img, f'Blink Count: {blinkCounter}', (50, 100),
#                             colorR=color)

#         imgPlot = plotY.update(ratioAvg, color)
#         img = cv2.resize(img, (640, 360))
#         imgStack = cvzone.stackImages([img, imgPlot], 2, 1)
#     else:
#         img = cv2.resize(img, (640, 360))
#         imgStack = cvzone.stackImages([img, img], 2, 1)

#     cv2.imshow("Image", imgStack)
#     cv2.waitKey(25) 


